@page "/crime-summary"
@using System.Text.Json;
@using UKCrimeApp.Models;
@using UKCrimeApp.Services;
@inject AppState appState
@inject CrimeDataService CrimeDataService
@inject IJSRuntime JSRuntime

<h1 class="page-title">Crime Data Search</h1>

<EditForm Model="@searchModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group row">
        <InputText class="input-text" @bind-Value="searchModel.Latitude" placeholder="Latitude (e.g., 51.5074)" />
        <InputText class="input-text" @bind-Value="searchModel.Longitude" placeholder="Longitude (e.g., -0.1278)" />
        <InputText class="input-text" @bind-Value="searchModel.Date" placeholder="Date (YYYY-MM)" />
    </div>
    <div class="form-submit">
        <button class="button-submit" type="submit">Search</button>
    </div>
</EditForm>

<div class="tabs">
    <button class="tab-button" @onclick="ShowGridView">Grid View</button>
    <button class="tab-button" @onclick="ShowMapView">Map View</button>
</div>

@if (isLoading)
{
    <div class="loading-bar-container">
        <div class="loading-bar" style="width: 100%;"></div>
    </div>
}
else if (activeTab == "grid")
{
    <!-- Grid View Content -->
    @if (groupedCrimes != null && groupedCrimes.Any())
    {
        <h3>Crime Summary</h3>
        <!-- Table to display crimes -->
    }
    else if (searchModel.Date != null)
    {
        <p>No data available for the selected date and location.</p>
    }
}
else if (activeTab == "map")
{
    <div id="map" style="height: 400px;"></div>
}

@code {
    private CrimeSearchModel searchModel = new CrimeSearchModel();
    private Dictionary<string, int> groupedCrimes = new Dictionary<string, int>();
    private bool isLoading = false;
    private string activeTab = "grid"; // Default to grid view
    private bool mapInitialized = false;

    protected override void OnInitialized()
    {
        searchModel = appState.CurrentSearch ?? new CrimeSearchModel();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (activeTab == "map" && !mapInitialized)
        {
            await JSRuntime.InvokeVoidAsync("loadMap");
            mapInitialized = true; // Prevent future calls for map initialization
        }
    }

    private async Task HandleValidSubmit()
    {
        isLoading = true;
        StateHasChanged();
        appState.CurrentSearch = searchModel;
        var crimes = await CrimeDataService.GetCrimesAsync(searchModel.Latitude, searchModel.Longitude, searchModel.Date);
        groupedCrimes = CrimeDataService.GroupCrimesByCategory(crimes);
        isLoading = false;
        StateHasChanged();

        if (activeTab == "map")
        {
            await JSRuntime.InvokeVoidAsync("loadMap");
        }
    }

    private void ShowGridView()
    {
        SetActiveTab("grid");
    }

    private void ShowMapView()
    {
        SetActiveTab("map");
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
        StateHasChanged();
    }
}
